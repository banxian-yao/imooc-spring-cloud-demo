
server:
  port: 20000
#  compression:
#    enabled: true
  # spring boot 2.3.X和2.2.X的一个异常处理的改动
  error:
    includeException: true
    includeStacktrace: ON_PARAM
    includeMessage: ALWAYS
#  servlet:
#    context-path: /coupon-user
#com:
#  alibaba:
#    nacos:
#      naming:
#        log:
#          level: DEBUG
spring:
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  application:
    name: restroom-service
  sleuth:
    sampler:
      probability: 1
  zipkin:
#    discovery-client-enabled: false
#    base-url: http://localhost:30000
#    sender:
#      type: web
    sender:
      type: rabbit
    rabbitmq:
      addresses: 127.0.0.1:5672
      queue: zipkin
  #    discovery-client-enabled: true
#    base-url: http://zipkin-server
#    locator:
#      discovery:
#        enabled: true
  cloud:
    nacos:
      discovery:
        # 可以配置多个，逗号分隔
        server-addr: localhost:8848
        # 默认就是你的application name，一般不用配置
        service: restroom-service
        # nacos客户端向服务端发送心跳的时间间隔，时间单位其实是ms，源码tm瞎写
        heart-beat-interval: 5000
        # 服务端没有接受到客户端心跳请求就将其设为不健康的时间间隔，默认为15s
        # 注：推荐值该值为15s即可，如果有的业务线希望服务下线或者出故障时希望尽快被发现，可以适当减少该值
        heart-beat-timeout: 20000
        # [注意] 这个IP地址如果更换网络后变化，会导致服务调用失败，建议先不要设置
        # ip: 172.20.7.228
        # 元数据部分
        metadata:
          mydata: freestyle
        # 默认false，默认为false。客户端在启动时是否读取本地配置项(一个文件)来获取服务列表
        #注：推荐该值为false，若改成true。则客户端会在本地的一个文件中保存服务信息，当下次宕机启动时，会优先读取本地的配置对外提供服务。
        naming-load-cache-at-start: false
        # 创建不同的集群
        cluster-name: Cluster-2
        # 命名空间ID，Nacos通过不同的命名空间来区分不同的环境，进行数据隔离，
        # 服务消费时只能消费到对应命名空间下的服务。
        # [注意]需要在nacos-server中创建好namespace，然后把id copy进来
        # namespace: b0140359-be13-4d3e-8aed-aaea743c6da6
        # [注意]employee-service也必须配置相同的group才能发起访问
        # group: myGroup
        # 向注册中心注册服务，默认为true
        # 如果只消费服务，不作为服务提供方，倒是可以设置成false，减少开销
        register-enabled: true
        # 类似长连接监听服务端信息变化的功能
        watch:
          enabled: true
        watch-delay: 30000

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate.format_sql: true
      hibernate.show_sql: true
    open-in-view: false

  datasource:
    # 数据源
    url: jdbc:mysql://127.0.0.1:3306/toilet_db?autoReconnect=true&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC
    username: canal
    password: canal
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 连接池
    hikari:
      connection-timeout: 20000
      idle-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 5
      max-lifetime: 30000
      auto-commit: true
      pool-name: imoocHikari
#  redis:
#    database: 0
#    host: 127.0.0.1
#    port: 6379
#    # password:
#    # 连接超时时间
#    timeout: 10000
#  kafka:
#    bootstrap-servers:
#      - localhost:9092
#    consumer:
#      group-id: imooc-test
#      auto-offset-reset: latest

management:
  endpoint:
    health:
      # 总是显示各个组件的actuator信息
      show-details: always
  endpoints:
    web:
      exposure:
        # 暴露所有endpoint
        include: '*'
  security:
    enabled: false

logging:
  level:
    ROOT: info
  pattern:
    dateformat: HH:mm:ss.SSS